name: release workflow with tests

on:
  push:
    tags: 
      - 'v*'
  release:
    types:
      - published
jobs:
  tests:
    name: "py${{ matrix.python-version }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
      - name: Install dependencies
        shell: bash {0}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
            export PATH="/c/Users/runneradmin/.local/bin:$PATH"
          else
            curl -LsSf https://astral.sh/uv/install.sh | sh
          fi
          uv python install ${{ matrix.python-version }}
          uv venv --python ${{ matrix.python-version }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            .venv\\Scripts\\activate
          else
            source .venv/bin/activate
          fi
          uv pip install -e .[tests]
      - name: Test with pytest
        shell: bash {0}
        run: |
          uv run pytest --cov=skpcp --cov-branch --cov-report=term-missing --cov-report=xml:coverage.xml -vv test

      
  # build wheel and deploy to pypi
  deploy:
    # Needs tests to be run successfully before deploying
    needs: [tests]
    runs-on: ubuntu-latest
    # Run only if there is a published release
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4
      - name: Install project dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv python install 3.11
          uv venv --python 3.11
          source .venv/bin/activate
          uv pip install -e .
      - name: Build package
        run: |
          uv build
      - name: Publish package
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv publish --token $PYPI_API_TOKEN